<<<<<<< HEAD
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
install.packages("devtools")
install.packages("devtools")
install_github("easyGgplot2", "kassambara")
install_github("easyGgplot2", "kassambara")
install.packages("devtools")
library("devtools")
install.packages("usethis")
library("devtools")
library("usethis")
library("devtools")
install_github("easyGgplot2", "kassambara")
install_github("kassambara/easyGgplot2")
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(easyGgplot2)
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(easyGgplot2)
library(digest)
install.packages("digest")
install_github("easyGgplot2", "kassambara")
install_github("kassambara/easyGgplot2")
install.packages("devtools")
library(devtools)
library(usethis)
library(devtools)
install_github("kassambara/easyGgplot2")
install_github("kassambara/easyGgplot2")
install.packages("rlang")
install_github("kassambara/easyGgplot2")
library(usethis)
library(devtools)
install_github("kassambara/easyGgplot2")
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(easyGgplot2)
library(rstan)
library(devtools)
library(brms)
library(loo)
library(KernSmooth)
library(tableone)
data <- read.csv("./suicide attempt data_2.csv", stringsAsFactors=FALSE)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
geom_vline(aes(xintercept=max(extract(resStan)$beta[,8])), col=I('black'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1) +
geom_vline(aes(xintercept=max(extract(resStan)$beta[,8])), col=I('black'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
#geom_vline(aes(xintercept=max(extract(resStan)$beta[,8])), col=I('black'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
which.max(density)
# Show traceplot
traceplot(resStan, pars = c('beta[3]','beta[4]', 'beta[5]',
'beta[6]', 'beta[7]', 'beta[8]',
'beta[9]'), inc_warmup = TRUE)
# Generate some scatter plots in order to see the correlations between parameters
plot(extract(resStan)$beta[,3], extract(resStan)$beta[,7], main="Correlation between location and education",
xlab="Urban", ylab="Education")
# qplot(extract(resStan)$beta[,3], bins = 30, geom = 'histogram', main='Histogram for Urban',
#                         xlab = 'weigths for the coefficient', ylab = 'Occurrences',
#                         col = I('red'))
# overlay histogram, density and show the mean value
# The plots of the most interesting parameters are presented.
# Using the mean value it could be interesting to understand
# which weaknly informative priors can be designed
plot_1 <- qplot(extract(resStan)$beta[,3], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Urbans') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,3])), col=I('yellow'), linetype="dashed", size=1)
plot_2 <- qplot(extract(resStan)$beta[,5], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Sex') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,5])), col=I('yellow'), linetype="dashed", size=1)
plot_3 <- qplot(extract(resStan)$beta[,6], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Age') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,6])), col=I('yellow'), linetype="dashed", size=1)
plot_4 <- qplot(extract(resStan)$beta[,7], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Education') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,7])), col=I('yellow'), linetype="dashed", size=1)
plot_5 <- qplot(extract(resStan)$beta[,8], geom = 'blank', xlab = 'Values of weigth', ylab = 'Occurences', main='Occupation') +
geom_histogram(aes(y = ..density..),col = I('red'), bins = 50) +
geom_line(aes(y = ..density..), size = 1, col = I('blue'), stat = 'density', ) +
geom_vline(aes(xintercept=mean(extract(resStan)$beta[,8])), col=I('yellow'), linetype="dashed", size=1)
ggplot2.multiplot(plot_1,plot_2,plot_3,plot_4, plot_5, cols=3)
=======
data$method != 'hanging')
mydata$method[indexPesticide] <- 1 # 1 --> Pesticide
mydata$method[indexPoison]    <- 2 # 2 --> Other poison
mydata$method[indexHanging]   <- 3 # 3 --> hanging
mydata$method[indexOthers]    <- 4 # 4 --> All others
rural_men   <- subset(data, data$Sex=="male" & data$Urban=="no")
rural_women <- subset(data, data$Sex=="female" & data$Urban=="no")
urban_men   <- subset(data, data$Sex=="male" & data$Urban=="yes")
urban_women <- subset(data, data$Sex=="female" & data$Urban=="yes")
str(data)
## Remove unknown labels
indexUnknw1 <- which(mydata$Education == 'unknown')
mydata <- mydata[-indexUnknw1,]
indexUnkn <- which(mydata$Urban == 'unknown')
mydata <- mydata[-indexUnkn,]
ncol(mydata) - 2
## Create Stan data
dat <- list(N        = nrow(mydata),
p        = ncol(mydata) - 2,
<<<<<<< HEAD
<<<<<<< HEAD
died     = c(t(mydata$Died)),
urban    = c(t(mydata$Urban)),
year     = c(t(mydata$Year)),
season   = c(t(mydata$Season)),
sex      = c(t(mydata$Sex)),
age      = c(t(mydata$Age)),
edu      = c(t(mydata$Education)),
job      = c(t(mydata$Occupation)),
method   = c(t(mydata$method)))
=======
=======
>>>>>>> 07d96d8728790d0d97158fee1355c2d2b8919cb5
died     = mydata$Died,
urban    = mydata$Urban,
year     = mydata$Year,
season   = mydata$Season,
sex      = mydata$Sex,
age      = mydata$Age,
edu      = mydata$Education,
job      = mydata$Occupation,
method   = mydata$method)
<<<<<<< HEAD
>>>>>>> 07d96d8728790d0d97158fee1355c2d2b8919cb5
=======
>>>>>>> 07d96d8728790d0d97158fee1355c2d2b8919cb5
## Load Stan file
fileName <- "./logistic_regression_model.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
cat(stan_code)
>>>>>>> 9248a0ca1a940c087436f2782177faf6aa12a9aa
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10,
seed = 1234)
## Create Stan data
dat <- list(N        = nrow(data_reduced),
p        = ncol(data_reduced) - 2,
died     = as.numeric(data_reduced$Died),
urban    = as.numeric(data_reduced$Urban),
year     = as.numeric(data_reduced$Year),
season   = as.numeric(data_reduced$Season),
sex      = as.numeric(data_reduced$Sex),
age      = as.numeric(data_reduced$Age),
edu      = as.numeric(data_reduced$Education),
job      = as.numeric(data_reduced$Occupation),
method   = as.numeric(data_reduced$method))
## Load Stan file
fileName <- "./logistic_regression_model.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
cat(stan_code)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10,
seed = 1234)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10,
seed = 1234)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10,
seed = 55)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10)
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(easyGgplot2)
library(rstan)
library(devtools)
library(brms)
library(loo)
library(KernSmooth)
library(tableone)
data <- read.csv("./suicide attempt data_2.csv", stringsAsFactors=FALSE)
mydata <- data
mydata$Season <- data$Month
mydata$Month = NULL
# Hospitalised
indexHosp   <- which(data$Hospitalised == 'yes')
indexNoHosp <- which(data$Hospitalised == 'no')
mydata$Hospitalised[indexHosp]   <- 1    # 1 --> yes
mydata$Hospitalised[indexNoHosp] <- 0    # 0 --> no
# Died
indexDied   <- which(data$Died == 'yes')
indexNoDied <- which(data$Died == 'no')
mydata$Died[indexDied]   <- 1    # 1 --> yes
mydata$Died[indexNoDied] <- 0    # 0 --> no
# Urban
indexUrban   <- which(data$Urban == 'yes')
indexNoUrban <- which(data$Urban == 'no')
mydata$Urban[indexUrban]   <- 1    # 1 --> yes
mydata$Urban[indexNoUrban] <- 0    # 0 --> no
# Season
indexSpring <- which(data$Month >= 3 & data$Month <= 5)
indexSummer <- which(data$Month >= 6 & data$Month <= 8)
indexAutumn <- which(data$Month >= 9 & data$Month <= 11)
indexWinter <- which(data$Month == 12 | data$Month <= 2)
mydata$Season[indexSpring] <- 1  # 1 --> Spring
mydata$Season[indexSummer] <- 2  # 2 --> Summer
mydata$Season[indexAutumn] <- 3  # 3 --> Autumn
mydata$Season[indexWinter] <- 4  # 4 --> Winter
# Sex
indexMale   <- which(data$Sex == 'male')
indexFemale <- which(data$Sex == 'female')
mydata$Sex[indexMale]   <- 1    # 1 --> male
mydata$Sex[indexFemale] <- 0    # 0 --> female
# Age
indexAgeOne   <- which(data$Age <= 34)
indexAgeTwo   <- which(data$Age >= 35 & data$Age <= 49)
indexAgeThree <- which(data$Age >= 50 & data$Age <= 64)
indexAgeFour  <- which(data$Age >= 65)
mydata$Age[indexAgeOne]   <- 1   # 1 --> <34
mydata$Age[indexAgeTwo]   <- 2   # 2 --> 35-49
mydata$Age[indexAgeThree] <- 3   # 3 --> 50-64
mydata$Age[indexAgeFour]  <- 4   # 4 --> >65
# Education
indexEduZero  <- which(data$Education == 'iliterate')
indexEduOne   <- which(data$Education == 'primary')
indexEduTwo   <- which(data$Education == 'Secondary')
indexEduThree <- which(data$Education == 'Tertiary')
mydata$Education[indexEduZero]   <- 0   # 0 --> iliterate
mydata$Education[indexEduOne]    <- 1   # 1 --> primary
mydata$Education[indexEduTwo]    <- 2   # 2 --> Secondary
mydata$Education[indexEduThree]  <- 3   # 3 --> Tertiary
# Occupation
indexFarm   <- which(data$Occupation == 'farming')
indexNoFarm <- which(data$Occupation != 'farming')
mydata$Occupation[indexFarm]   <- 1    # 1 --> farming
mydata$Occupation[indexNoFarm] <- 0    # 0 --> non farming
# Method
indexPesticide <- which(data$method == 'Pesticide')
indexPoison    <- which(data$method == 'Other poison')
indexHanging    <- which(data$method == 'hanging')
indexOthers    <- which(data$method != 'Pesticide' &
data$method != 'Other poison' &
data$method != 'hanging')
mydata$method[indexPesticide] <- 1 # 1 --> Pesticide
mydata$method[indexPoison]    <- 2 # 2 --> Other poison
mydata$method[indexHanging]   <- 3 # 3 --> hanging
mydata$method[indexOthers]    <- 4 # 4 --> All others
rural_men   <- subset(data, data$Sex=="male" & data$Urban=="no")
rural_women <- subset(data, data$Sex=="female" & data$Urban=="no")
urban_men   <- subset(data, data$Sex=="male" & data$Urban=="yes")
urban_women <- subset(data, data$Sex=="female" & data$Urban=="yes")
str(mydata)
## Remove unknown labels
indexUnknw1 <- which(mydata$Education == 'unknown')
mydata <- mydata[-indexUnknw1,]
indexUnkn <- which(mydata$Urban == 'unknown')
mydata <- mydata[-indexUnkn,]
random_index <- sample(mydata$Person_ID, size = 50, replace = TRUE)
data_reduced <- mydata[random_index, ]
data_reduced <- na.omit(data_reduced)
## Create Stan data
dat <- list(N        = nrow(data_reduced),
p        = ncol(data_reduced) - 2,
died     = as.numeric(data_reduced$Died),
urban    = as.numeric(data_reduced$Urban),
year     = as.numeric(data_reduced$Year),
season   = as.numeric(data_reduced$Season),
sex      = as.numeric(data_reduced$Sex),
age      = as.numeric(data_reduced$Age),
edu      = as.numeric(data_reduced$Education),
job      = as.numeric(data_reduced$Occupation),
method   = as.numeric(data_reduced$method))
## Load Stan file
fileName <- "./logistic_regression_model.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
cat(stan_code)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
thin = 10)
remove.packages("rstan")
install.packages("https://win-builder.r-project.org/jpMlFHwQs41q/rstan_2.19.1.zip", repos = NULL)
install.packages(rstan)
install.packages("rstan")
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(easyGgplot2)
library(rstan)
library(devtools)
library(brms)
library(loo)
library(KernSmooth)
library(tableone)
data <- read.csv("./suicide attempt data_2.csv", stringsAsFactors=FALSE)
# Run Stan
resStan <- stan(model_code = stan_code,
data = dat,
chains = 3,
iter = 1000,
warmup = 500,
<<<<<<< HEAD
thin = 10,
seed = 1234)
=======
thin = 10)
# Show traceplot
traceplot(resStan, pars = c("beta"), inc_warmup = TRUE)
outcomeModel <- glm(as.numeric(Died) ~ as.numeric(Urban) +
as.numeric(Year) +
as.numeric(Season) +
as.numeric(Sex) +
as.numeric(Age) +
as.numeric(Education) +
as.numeric(Occupation) +
as.numeric(method), data = mydata,
family = binomial(link = "logit"))
summary(outcomeModel)
## Bayesian
print(resStan, pars = c("beta"))
## Frequentist
tableone::ShowRegTable(outcomeModel, exp = FALSE)
indexYear2009 <- which(mydata$Year == 2009)
data_year_2009 <- mydata[indexYear2009,]
indexYear2010 <- which(mydata$Year == 2010)
data_year_2010 <- mydata[indexYear2010,]
indexYear2011 <- which(mydata$Year == 2011)
data_year_2011 <- mydata[indexYear2011,]
random_index <- sample(mydata$Person_ID, size = 50, replace = TRUE)
data_reduced <- mydata[random_index, ]
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
library(magrittr)
#library(XLConnect)
library(rstan)
library(nnet)
library(epitools)
library(aaltobda)
library(tinytex)
library(MASS)
library(mvtnorm)
library(ggplot2)
library(rstan)
library(devtools)
library(brms)
library(loo)
library(KernSmooth)
library(tableone)
data <- read.csv("./suicide attempt data_2.csv", stringsAsFactors=FALSE)
# Show traceplot
traceplot(resStan, pars = c("beta"), inc_warmup = TRUE)
View(data)
View(data)
View(mydata)
View(mydata)
>>>>>>> 9248a0ca1a940c087436f2782177faf6aa12a9aa
